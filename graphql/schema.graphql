"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find

    books: [Books] @all
    book(id: ID @eq): Books @find
    featured(featured: Boolean! @eq): [Books] @all
    someComplexQuery(search: String!): [Books]

    categories: [Category] @all
    category(id: ID @eq): Category @find
}
type Mutation {
    createCategory(
        name: String @rules(apply: ["required", "unique:categories,name"])
    ): Category @create
    updateCategory(
        id: ID @rules(apply: ["required"])
        name: String @rules(apply: ["required", "unique:categories,name"])
    ): Category @update
    deleteCategory(id: ID! @rules(apply: ["required"])): Category @delete
    createBooks(
        title: String! @rules(apply: ["required"])
        author: String! @rules(apply: ["required"])
        image: String
        link: String
        description: String
        featured: Boolean
        category_id: Int!
    ): Books @create
    updateBooks(
        id: ID! @rules(apply: ["required"])
        title: String! @rules(apply: ["required"])
        author: String! @rules(apply: ["required"])
        image: String
        link: String
        description: String
        featured: Boolean
        category_id: Int!
    ): Books @update
    deleteBooks(id: ID! @rules(apply: ["required"])): Books @delete
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type Books {
    id: ID!
    title: String!
    author: String!
    image: String
    link: String
    description: String
    featured: Boolean
    category: Category! @belongsTo
}

type Category {
    id: ID!
    name: String!
    books: [Books] @hasMany
}
